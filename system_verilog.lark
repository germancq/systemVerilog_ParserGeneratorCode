// SystemVerilog grammar for Lark
// Author : German Cano Quiveu germancq@dte.us.es

module: header_module code end_module


header_module: MODULE CNAME [list_parameters] list_ports
end_module: END_MODULE ":" CNAME
 
list_parameters: "#("(parameter ",")* parameter ")"
list_ports: "("(port ",")*  port");"


port: input | output
parameter: PARAMETER CNAME "=" value 

input :INPUT [LOGIC] [size] CNAME [size] 
output :OUTPUT [LOGIC] [size] CNAME [size] 


variable: type [size] CNAME [size] ";"
assign: ASSIGN CNAME "=" expresion ";"


inst_var: [size|access_bit] CNAME [size|access_bit]

parameter_value: value | inst_var



value: number | CNAME
number: SIGNED_NUMBER | HEX_NUMBER 

size: "["value":"value"]"
access_bit: "["value"]"


type : LOGIC | WIRE



MODULE: "module"
END_MODULE: "endmodule"

INPUT: "input"
OUTPUT: "output"
PARAMETER: "parameter"
LOGIC : "logic"
WIRE : "wire"
ALWAYS_COMB: "always_comb"
ALWAYS_FF : "always_ff"
ASSIGN : "assign"
LOCALPARAM : "localparam"
CASE : "case"
ENDCASE : "endcase"
ALWAYS : ALWAYS_COMB | ALWAYS_FF

HEX_NUMBER: /0x[\da-f]*l?/i


%import common.CNAME
%import common.SIGNED_NUMBER
%import common.WS
%import common.C_COMMENT
%import common.CPP_COMMENT
COMMENT : C_COMMENT | CPP_COMMENT
%ignore WS
%ignore COMMENT