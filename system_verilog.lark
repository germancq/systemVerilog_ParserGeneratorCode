// SystemVerilog grammar for Lark
// Author : German Cano Quiveu germancq@dte.us.es


module: (header_module [code] end_module)+


header_module: MODULE CNAME [list_parameters] list_ports
end_module: END_MODULE [":" CNAME]
code: (assign | inst_var | variable | inst_module)*


 
list_parameters: "#(" [(parameter ",")*] parameter ")"

list_ports: "(" [(port ",")* port] ");"


port: input | output
parameter: _PARAMETER name "=" value 

input :_INPUT [LOGIC] [size] name [size_2d] 
output :_OUTPUT [LOGIC] [size] name [size_2d] 

name: CNAME

variable: type [size] CNAME [size_2d] ";"
assign: ASSIGN CNAME "=" expresion ";"


inst_module: name_mod [inst_parameters] name_inst [inst_ports]

name_mod: CNAME
name_inst: CNAME
inst_parameters: "#(" [(inst_param ",")*] inst_param ")"
inst_ports: "(" [(inst_port ",")*] [inst_port] ");"

inst_param: "." name "(" parameter_value ")"
inst_port: "." name "(" port_value ")"

inst_var: [size|access_bit] CNAME [size_2d|access_bit]

parameter_value: value | inst_var
port_value: value | inst_var

expresion: value | ternary_op 

ternary_op: expresion "?" expresion ":" expresion 

value: SIGNED_NUMBER | HEX_NUMBER | CNAME
 


size: "["size_part":"size_part"]"
size_2d: "["size_part":"size_part"]"
access_bit: "["(value)+"]"
size_part: (value)+ 

type : LOGIC | WIRE



MODULE: "module"
END_MODULE: "endmodule"

_INPUT: "input"
_OUTPUT: "output"
_PARAMETER: "parameter"
LOGIC : "logic"
WIRE : "wire"
ALWAYS_COMB: "always_comb"
ALWAYS_FF : "always_ff"
ASSIGN : "assign"
LOCALPARAM : "localparam"
CASE : "case"
ENDCASE : "endcase"
ALWAYS : ALWAYS_COMB | ALWAYS_FF

HEX_NUMBER: /0x[\da-f]*l?/i


%import common.CNAME
%import common.SIGNED_NUMBER
%import common.WS
%import common.C_COMMENT
%import common.CPP_COMMENT
COMMENT : C_COMMENT | CPP_COMMENT
NEWLINE: "\n"
%ignore WS
%ignore COMMENT
%ignore NEWLINE

