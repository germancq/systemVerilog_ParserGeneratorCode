// SystemVerilog grammar for Lark
// Author : German Cano Quiveu germancq@dte.us.es
?header_module: MODULE [list_parameters] CNAME list_ports
 
?list_parameters: "#("(parameter ",")* parameter ")"
?list_ports: "("(port ",")*  port");"


?port: input | output
?parameter: PARAMETER CNAME "=" value 

?input :INPUT [LOGIC] [size] CNAME [size] 
?output :OUTPUT [LOGIC] [size] CNAME [size] 


//?code : (statement)*
//?statement : localparam | assign | variable | instance | always_comb | always_ff

//?instance : CNAME [list_inst_parameters] list_inst_ports

//?list_inst_parameters: "#("(inst_parameter ",")* inst_parameter ")"
//?list_inst_ports: "("(inst_port ",")*  inst_port");"
//?inst_parameter: "."CNAME"("parameter_value")"
//?inst_port: "."CNAME"("inst_var")"

//?assign : ASSIGN inst_var "=" inst_var ";"


//?localparam : LOCALPARAM CNAME "=" parameter_value

//?always_comb : ALWAYS_COMB ["begin"] (always_comb_instruction)+ ["end"]

//?always_comb_instruction : block_assigment | case_block | if_else_statement

//?block_assigment: inst_var "=" parameter_value ";"



?variable: LOGIC [size] CNAME [size] ";"

?inst_var: [size|access_bit] CNAME [size|access_bit]

?parameter_value: value | inst_var



?value: number | CNAME
?number: SIGNED_NUMBER | HEX_NUMBER 

?size: "["value":"value"]"
?access_bit: "["value"]"






MODULE: "module"
END_MODULE: "endmodule"

INPUT: "input"
OUTPUT: "output"
PARAMETER: "parameter"
LOGIC : "logic"
WIRE : "wire"
ALWAYS_COMB: "always_comb"
ALWAYS_FF : "always_ff"
ASSIGN : "assign"
LOCALPARAM : "localparam"
CASE : "case"
ENDCASE : "endcase"
ALWAYS : ALWAYS_COMB | ALWAYS_FF

HEX_NUMBER: /0x[\da-f]*l?/i


%import common.CNAME
%import common.SIGNED_NUMBER
%import common.WS
%import common.C_COMMENT
%import common.CPP_COMMENT
COMMENT : C_COMMENT | CPP_COMMENT
%ignore WS
%ignore COMMENT